
HackathonProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00802000  000006f6  0000078a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00802200  00802200  0000098a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005f4e  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e3f  00000000  00000000  00006a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a19  00000000  00000000  0000a859  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  0000b274  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004dc1  00000000  00000000  0000b540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054a  00000000  00000000  00010301  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0001084b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_20>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__vector_44>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_119>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	12 e2       	ldi	r17, 0x22	; 34
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e6 ef       	ldi	r30, 0xF6	; 246
 21c:	f6 e0       	ldi	r31, 0x06	; 6
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	22 e2       	ldi	r18, 0x22	; 34
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b2 e2       	ldi	r27, 0x22	; 34
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a4 30       	cpi	r26, 0x04	; 4
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 66 02 	call	0x4cc	; 0x4cc <main>
 244:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <PORTA_INIT>:
 */ 

#include "GPIO.h"

void PORTA_INIT(void)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRCLR = 0xFF; //sets all of PORTA to input
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	96 e0       	ldi	r25, 0x06	; 6
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	fc 01       	movw	r30, r24
 25c:	22 83       	std	Z+2, r18	; 0x02
}
 25e:	00 00       	nop
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <PORTC_INIT>:

void PORTC_INIT(void)
{
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRSET = 0xFF; //sets all of PORTF to Output
 26e:	80 e4       	ldi	r24, 0x40	; 64
 270:	96 e0       	ldi	r25, 0x06	; 6
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	fc 01       	movw	r30, r24
 276:	21 83       	std	Z+1, r18	; 0x01
	
	
}
 278:	00 00       	nop
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <PORTE_INIT>:

void PORTE_INIT(void)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRCLR = PIN0_bm | PIN1_bm; //set e1 and e0 to be input
 288:	80 e8       	ldi	r24, 0x80	; 128
 28a:	96 e0       	ldi	r25, 0x06	; 6
 28c:	23 e0       	ldi	r18, 0x03	; 3
 28e:	fc 01       	movw	r30, r24
 290:	22 83       	std	Z+2, r18	; 0x02
	PORTE.INT0MASK =  PIN0_bm; //defender set/score
 292:	80 e8       	ldi	r24, 0x80	; 128
 294:	96 e0       	ldi	r25, 0x06	; 6
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	fc 01       	movw	r30, r24
 29a:	22 87       	std	Z+10, r18	; 0x0a
	PORTE.INT1MASK =  PIN1_bm; //ready button
 29c:	80 e8       	ldi	r24, 0x80	; 128
 29e:	96 e0       	ldi	r25, 0x06	; 6
 2a0:	22 e0       	ldi	r18, 0x02	; 2
 2a2:	fc 01       	movw	r30, r24
 2a4:	23 87       	std	Z+11, r18	; 0x0b
	PORTE.INTCTRL = 0b1010; //sets to midlvl interrupts
 2a6:	80 e8       	ldi	r24, 0x80	; 128
 2a8:	96 e0       	ldi	r25, 0x06	; 6
 2aa:	2a e0       	ldi	r18, 0x0A	; 10
 2ac:	fc 01       	movw	r30, r24
 2ae:	21 87       	std	Z+9, r18	; 0x09
	PORTE.PIN0CTRL = 0b011;
 2b0:	80 e8       	ldi	r24, 0x80	; 128
 2b2:	96 e0       	ldi	r25, 0x06	; 6
 2b4:	23 e0       	ldi	r18, 0x03	; 3
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL = 0b010;
 2ba:	80 e8       	ldi	r24, 0x80	; 128
 2bc:	96 e0       	ldi	r25, 0x06	; 6
 2be:	22 e0       	ldi	r18, 0x02	; 2
 2c0:	fc 01       	movw	r30, r24
 2c2:	21 8b       	std	Z+17, r18	; 0x11
	
}
 2c4:	00 00       	nop
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <PORTF_INIT>:

void PORTF_INIT(void)
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRSET = PIN3_bm | PIN4_bm | PIN5_bm; //sets 3, 4 and 5 of F to output (TX, ANALOGOUT, and POWERDOWN)
 2d4:	80 ea       	ldi	r24, 0xA0	; 160
 2d6:	96 e0       	ldi	r25, 0x06	; 6
 2d8:	28 e3       	ldi	r18, 0x38	; 56
 2da:	fc 01       	movw	r30, r24
 2dc:	21 83       	std	Z+1, r18	; 0x01
	PORTF.OUTSET = PIN5_bm; //sets POWERDOWN to VCC
 2de:	80 ea       	ldi	r24, 0xA0	; 160
 2e0:	96 e0       	ldi	r25, 0x06	; 6
 2e2:	20 e2       	ldi	r18, 0x20	; 32
 2e4:	fc 01       	movw	r30, r24
 2e6:	25 83       	std	Z+5, r18	; 0x05
	PORTF.OUTSET = PIN3_bm; //TX default val high
 2e8:	80 ea       	ldi	r24, 0xA0	; 160
 2ea:	96 e0       	ldi	r25, 0x06	; 6
 2ec:	28 e0       	ldi	r18, 0x08	; 8
 2ee:	fc 01       	movw	r30, r24
 2f0:	25 83       	std	Z+5, r18	; 0x05
	PORTF.DIRCLR = PIN2_bm; //sets RX to input
 2f2:	80 ea       	ldi	r24, 0xA0	; 160
 2f4:	96 e0       	ldi	r25, 0x06	; 6
 2f6:	24 e0       	ldi	r18, 0x04	; 4
 2f8:	fc 01       	movw	r30, r24
 2fa:	22 83       	std	Z+2, r18	; 0x02
	
}
 2fc:	00 00       	nop
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <PORTD_INIT>:

void PORTD_INIT(void)
{
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
	PORTD.DIRSET = PIN4_bm | PIN5_bm | PIN6_bm;
 30c:	80 e6       	ldi	r24, 0x60	; 96
 30e:	96 e0       	ldi	r25, 0x06	; 6
 310:	20 e7       	ldi	r18, 0x70	; 112
 312:	fc 01       	movw	r30, r24
 314:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTSET = PIN4_bm | PIN5_bm | PIN6_bm;
 316:	80 e6       	ldi	r24, 0x60	; 96
 318:	96 e0       	ldi	r25, 0x06	; 6
 31a:	20 e7       	ldi	r18, 0x70	; 112
 31c:	fc 01       	movw	r30, r24
 31e:	25 83       	std	Z+5, r18	; 0x05
 320:	00 00       	nop
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <dac_init>:
	0x670,0x6a1,0x6d3,0x705,0x737,0x769,0x79b,0x7cd,
};



void dac_init(void){
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
	//CTRLB channel 0 default used
	
	//#define DAC_CH0EN_bm  0x04  /* Channel 0 Output Enable bit mask. */
	DACA.CTRLA = DAC_ENABLE_bm|DAC_CH1EN_bm;	//enable DAC mod and CH0, output enable pin for ch 1 enabled
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	93 e0       	ldi	r25, 0x03	; 3
 334:	29 e0       	ldi	r18, 0x09	; 9
 336:	fc 01       	movw	r30, r24
 338:	20 83       	st	Z, r18
	
	//DAC_CHSEL_SINGLE_gc = (0x00<<5),  /* Single channel operation (Channel 0 only) */
	//DAC_CH0TRIG_bm  0x01  /* Channel 0 Event Trig Enable bit mask. */
	DACA.CTRLB = DAC_CHSEL_SINGLE1_gc|DAC_CH1TRIG_bm; //single channel operation for channel 0 only
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	93 e0       	ldi	r25, 0x03	; 3
 33e:	22 e2       	ldi	r18, 0x22	; 34
 340:	fc 01       	movw	r30, r24
 342:	21 83       	std	Z+1, r18	; 0x01
	//CTRLC, set Internal 1.00V - default

	//DAC_REFSEL_AREFB_gc = (0x03<<3),  /* External reference on AREF on PORTB */
	DACA.CTRLC =  DAC_REFSEL_AREFB_gc;
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	93 e0       	ldi	r25, 0x03	; 3
 348:	28 e1       	ldi	r18, 0x18	; 24
 34a:	fc 01       	movw	r30, r24
 34c:	22 83       	std	Z+2, r18	; 0x02
	//EVCTRL controls interrupts
	//DAC_EVSEL_0_gc
	//DAC_EVSEL0_bm
	DACA.EVCTRL = DAC_EVSEL_0_gc;
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	93 e0       	ldi	r25, 0x03	; 3
 352:	fc 01       	movw	r30, r24
 354:	13 82       	std	Z+3, r1	; 0x03
	
	//DACA.CH0DATA = 0x37;
}
 356:	00 00       	nop
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <timer_initnoise>:

void timer_initnoise(){
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
	//1000Hz
	//500(PER)=(32e6/64)*.001
	TCC0.PER = 71;
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	98 e0       	ldi	r25, 0x08	; 8
 36a:	27 e4       	ldi	r18, 0x47	; 71
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	fc 01       	movw	r30, r24
 370:	26 a3       	std	Z+38, r18	; 0x26
 372:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;	//prescaler == 64
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	98 e0       	ldi	r25, 0x08	; 8
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	fc 01       	movw	r30, r24
 37c:	20 83       	st	Z, r18
	//TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
	//PMIC.CTRL = PMIC_LOLVLEN_bm;
	//sei();
}
 37e:	00 00       	nop
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <dma_init>:

void dma_init(void){
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
	DMA.CTRL |= DMA_RESET_bm;
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	31 e0       	ldi	r19, 0x01	; 1
 396:	f9 01       	movw	r30, r18
 398:	20 81       	ld	r18, Z
 39a:	20 64       	ori	r18, 0x40	; 64
 39c:	fc 01       	movw	r30, r24
 39e:	20 83       	st	Z, r18
	//src addr corresponds to 1st index of arr
	//reload bitfield, when does src add reload to OG config
	//every triggere add inc to next element, at end reset to beg @end of block
	//after transcmtting, inc to get to next byte
	//DESTINATIONRELOAD is noe, its the same DAC output register- FIXED dest addr mode
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BLOCK_gc|DMA_CH_SRCDIR_INC_gc|
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	29 e5       	ldi	r18, 0x59	; 89
 3a6:	fc 01       	movw	r30, r24
 3a8:	22 8b       	std	Z+18, r18	; 0x12
	DMA_CH_DESTRELOAD_BURST_gc|DMA_CH_DESTDIR_INC_gc;

	
	//trigger src reg trigger off of other peripherals- DMA burst trigger off of other periph (TCC0 ovf flag)
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	fc 01       	movw	r30, r24
 3b2:	23 8b       	std	Z+19, r18	; 0x13
	//transfer count 16 bit reg determines how many bytes per block
	DMA.CH0.TRFCNT = (uint16_t)(sizeof(tab));	//bytes in array - 256 elements*2bytes
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	32 e0       	ldi	r19, 0x02	; 2
 3bc:	fc 01       	movw	r30, r24
 3be:	24 8b       	std	Z+20, r18	; 0x14
 3c0:	35 8b       	std	Z+21, r19	; 0x15
	//int i = (uint16_t)(sizeof(tab));	//evaluates to 512
	//ulimited repets by setting REPCNT to zero
	DMA.CH0.REPCNT = 0x00;
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	fc 01       	movw	r30, r24
 3c8:	16 8a       	std	Z+22, r1	; 0x16
	
	//printf("%d", i);
	//init src and dest addr
	//if reg greater than 8 bits load low byte 1st
	//SRCADDR 24 bit value
	DMA.CH0.SRCADDR0 = (uintptr_t)tab;	//arith with pointers, cast to 8 bit src addr 0 is 8 bits
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	30 e2       	ldi	r19, 0x20	; 32
 3d2:	fc 01       	movw	r30, r24
 3d4:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1 = ( ((uintptr_t)tab) >> 8);
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	30 e2       	ldi	r19, 0x20	; 32
 3de:	23 2f       	mov	r18, r19
 3e0:	33 27       	eor	r19, r19
 3e2:	fc 01       	movw	r30, r24
 3e4:	21 8f       	std	Z+25, r18	; 0x19
	DMA.CH0.SRCADDR2 = ( (uint32_t)((uintptr_t)tab) >> 16);
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	31 e0       	ldi	r19, 0x01	; 1
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	90 e2       	ldi	r25, 0x20	; 32
 3ee:	cc 01       	movw	r24, r24
 3f0:	a0 e0       	ldi	r26, 0x00	; 0
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	cd 01       	movw	r24, r26
 3f6:	aa 27       	eor	r26, r26
 3f8:	bb 27       	eor	r27, r27
 3fa:	f9 01       	movw	r30, r18
 3fc:	82 8f       	std	Z+26, r24	; 0x1a
	
	//dest
	DMA.CH0.DESTADDR0 = (uint8_t)(uintptr_t)&DACA.CH1DATA;	//& returns address of register
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	2a e1       	ldi	r18, 0x1A	; 26
 404:	fc 01       	movw	r30, r24
 406:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (uint8_t)( ((uintptr_t)&DACA.CH1DATA) >> 8);
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	23 e0       	ldi	r18, 0x03	; 3
 40e:	fc 01       	movw	r30, r24
 410:	25 8f       	std	Z+29, r18	; 0x1d
	DMA.CH0.DESTADDR2 = (uint8_t)( (uint32_t)((uintptr_t)&DACA.CH1DATA) >> 16);
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	fc 01       	movw	r30, r24
 418:	16 8e       	std	Z+30, r1	; 0x1e
	//choose channel 0
	//DMA.CH0.CTRLA = DMA_CH_SINGLE_bm|DMA_CH_BURSTLEN_2BYTE_gc|DMA_CH_SINGLE_bm;	//const 1.5 volts
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_REPEAT_bm | DMA_CH_SINGLE_bm;
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	25 e2       	ldi	r18, 0x25	; 37
 420:	fc 01       	movw	r30, r24
 422:	20 8b       	std	Z+16, r18	; 0x10
	
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	31 e0       	ldi	r19, 0x01	; 1
 42c:	f9 01       	movw	r30, r18
 42e:	20 89       	ldd	r18, Z+16	; 0x10
 430:	20 68       	ori	r18, 0x80	; 128
 432:	fc 01       	movw	r30, r24
 434:	20 8b       	std	Z+16, r18	; 0x10
	
	//enable entire DMA
	DMA.CTRL |= DMA_ENABLE_bm;	//or equal to not overwrite bits
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	20 e0       	ldi	r18, 0x00	; 0
 43c:	31 e0       	ldi	r19, 0x01	; 1
 43e:	f9 01       	movw	r30, r18
 440:	20 81       	ld	r18, Z
 442:	20 68       	ori	r18, 0x80	; 128
 444:	fc 01       	movw	r30, r24
 446:	20 83       	st	Z, r18

}
 448:	00 00       	nop
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <__vector_20>:
volatile uint8_t gameState = 0;
volatile uint8_t s1Set = 0;
volatile uint8_t receivedSet = 0;
volatile uint8_t receivedData = 0;

ISR(TCC1_OVF_vect){
 450:	1f 92       	push	r1
 452:	0f 92       	push	r0
 454:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 458:	0f 92       	push	r0
 45a:	11 24       	eor	r1, r1
 45c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 460:	0f 92       	push	r0
 462:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 466:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 46a:	0f 92       	push	r0
 46c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 470:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 474:	0f 92       	push	r0
 476:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 47a:	2f 93       	push	r18
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
	TCC1.CTRLA = 0x00;
 48c:	80 e4       	ldi	r24, 0x40	; 64
 48e:	98 e0       	ldi	r25, 0x08	; 8
 490:	fc 01       	movw	r30, r24
 492:	10 82       	st	Z, r1
	PORTF.OUTCLR = PIN5_bm; //sets POWERDOWN to VCC, 
 494:	80 ea       	ldi	r24, 0xA0	; 160
 496:	96 e0       	ldi	r25, 0x06	; 6
 498:	20 e2       	ldi	r18, 0x20	; 32
 49a:	fc 01       	movw	r30, r24
 49c:	26 83       	std	Z+6, r18	; 0x06
	//PORTC.OUT =0x00;
}
 49e:	00 00       	nop
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	9f 91       	pop	r25
 4aa:	8f 91       	pop	r24
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 4b4:	0f 90       	pop	r0
 4b6:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 4ba:	0f 90       	pop	r0
 4bc:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 4c0:	0f 90       	pop	r0
 4c2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 4c6:	0f 90       	pop	r0
 4c8:	1f 90       	pop	r1
 4ca:	18 95       	reti

000004cc <main>:

int main(void)
{
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
	PORTA_INIT();
 4d4:	0e 94 26 01 	call	0x24c	; 0x24c <PORTA_INIT>
	PORTC_INIT();
 4d8:	0e 94 33 01 	call	0x266	; 0x266 <PORTC_INIT>
	PORTF_INIT();
 4dc:	0e 94 66 01 	call	0x2cc	; 0x2cc <PORTF_INIT>
	PORTE_INIT();
 4e0:	0e 94 40 01 	call	0x280	; 0x280 <PORTE_INIT>
	USARTF0_INIT();
 4e4:	0e 94 48 03 	call	0x690	; 0x690 <USARTF0_INIT>
	PORTD_INIT();
 4e8:	0e 94 82 01 	call	0x304	; 0x304 <PORTD_INIT>
	
	//clock_init();
	timer_initnoise(); //TCC0 
 4ec:	0e 94 af 01 	call	0x35e	; 0x35e <timer_initnoise>
	dac_init();
 4f0:	0e 94 94 01 	call	0x328	; 0x328 <dac_init>
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc; 
 4f4:	80 e4       	ldi	r24, 0x40	; 64
 4f6:	98 e0       	ldi	r25, 0x08	; 8
 4f8:	21 e0       	ldi	r18, 0x01	; 1
 4fa:	fc 01       	movw	r30, r24
 4fc:	26 83       	std	Z+6, r18	; 0x06
	dma_init();
 4fe:	0e 94 c3 01 	call	0x386	; 0x386 <dma_init>
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc; //setting ch0 to care about timer counter overflow interrupt
 502:	80 e8       	ldi	r24, 0x80	; 128
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	20 ec       	ldi	r18, 0xC0	; 192
 508:	fc 01       	movw	r30, r24
 50a:	20 83       	st	Z, r18

	PMIC.CTRL |= PMIC_MEDLVLEN_bm; //enable mid lvl interrupts
 50c:	80 ea       	ldi	r24, 0xA0	; 160
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	20 ea       	ldi	r18, 0xA0	; 160
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	f9 01       	movw	r30, r18
 516:	22 81       	ldd	r18, Z+2	; 0x02
 518:	22 60       	ori	r18, 0x02	; 2
 51a:	fc 01       	movw	r30, r24
 51c:	22 83       	std	Z+2, r18	; 0x02
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 51e:	80 ea       	ldi	r24, 0xA0	; 160
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	20 ea       	ldi	r18, 0xA0	; 160
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	f9 01       	movw	r30, r18
 528:	22 81       	ldd	r18, Z+2	; 0x02
 52a:	21 60       	ori	r18, 0x01	; 1
 52c:	fc 01       	movw	r30, r24
 52e:	22 83       	std	Z+2, r18	; 0x02
	sei();
 530:	78 94       	sei
	while(1){
TCC0.PER = 80;
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	98 e0       	ldi	r25, 0x08	; 8
 536:	20 e5       	ldi	r18, 0x50	; 80
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	fc 01       	movw	r30, r24
 53c:	26 a3       	std	Z+38, r18	; 0x26
 53e:	37 a3       	std	Z+39, r19	; 0x27
			PORTF.OUTSET = PIN5_bm; //sets POWERDOWN to VCC, 
 540:	80 ea       	ldi	r24, 0xA0	; 160
 542:	96 e0       	ldi	r25, 0x06	; 6
 544:	20 e2       	ldi	r18, 0x20	; 32
 546:	fc 01       	movw	r30, r24
 548:	25 83       	std	Z+5, r18	; 0x05
			TCC1.CNT = 0x0000;
 54a:	80 e4       	ldi	r24, 0x40	; 64
 54c:	98 e0       	ldi	r25, 0x08	; 8
 54e:	fc 01       	movw	r30, r24
 550:	10 a2       	std	Z+32, r1	; 0x20
 552:	11 a2       	std	Z+33, r1	; 0x21
			TCC1.PER = 0x1F00; //1E00
 554:	80 e4       	ldi	r24, 0x40	; 64
 556:	98 e0       	ldi	r25, 0x08	; 8
 558:	20 e0       	ldi	r18, 0x00	; 0
 55a:	3f e1       	ldi	r19, 0x1F	; 31
 55c:	fc 01       	movw	r30, r24
 55e:	26 a3       	std	Z+38, r18	; 0x26
 560:	37 a3       	std	Z+39, r19	; 0x27
			TCC1.CTRLA = TC_CLKSEL_DIV1024_gc;
 562:	80 e4       	ldi	r24, 0x40	; 64
 564:	98 e0       	ldi	r25, 0x08	; 8
 566:	27 e0       	ldi	r18, 0x07	; 7
 568:	fc 01       	movw	r30, r24
 56a:	20 83       	st	Z, r18
	}
 56c:	e2 cf       	rjmp	.-60     	; 0x532 <main+0x66>

0000056e <__vector_44>:
}


//triggered when S1 is pressed
ISR(PORTE_INT1_vect)
{
 56e:	1f 92       	push	r1
 570:	0f 92       	push	r0
 572:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 576:	0f 92       	push	r0
 578:	11 24       	eor	r1, r1
 57a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 57e:	0f 92       	push	r0
 580:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 584:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 588:	0f 92       	push	r0
 58a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 58e:	8f 93       	push	r24
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
	
	//s1 set
	s1Set = 1;
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	80 93 02 22 	sts	0x2202, r24	; 0x802202 <s1Set>
	
}
 59e:	00 00       	nop
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	8f 91       	pop	r24
 5a6:	0f 90       	pop	r0
 5a8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 5ac:	0f 90       	pop	r0
 5ae:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 5b2:	0f 90       	pop	r0
 5b4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 5b8:	0f 90       	pop	r0
 5ba:	1f 90       	pop	r1
 5bc:	18 95       	reti

000005be <__vector_119>:

ISR(USARTF0_RXC_vect)
{
 5be:	1f 92       	push	r1
 5c0:	0f 92       	push	r0
 5c2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 5c6:	0f 92       	push	r0
 5c8:	11 24       	eor	r1, r1
 5ca:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 5ce:	0f 92       	push	r0
 5d0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 5d4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 5d8:	0f 92       	push	r0
 5da:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 5de:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 5e2:	0f 92       	push	r0
 5e4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 5e8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 5ec:	0f 92       	push	r0
 5ee:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 5f2:	2f 93       	push	r18
 5f4:	3f 93       	push	r19
 5f6:	4f 93       	push	r20
 5f8:	5f 93       	push	r21
 5fa:	6f 93       	push	r22
 5fc:	7f 93       	push	r23
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	af 93       	push	r26
 604:	bf 93       	push	r27
 606:	ef 93       	push	r30
 608:	ff 93       	push	r31
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	cd b7       	in	r28, 0x3d	; 61
 610:	de b7       	in	r29, 0x3e	; 62
	
	receivedData = USARTF0_in_char();
 612:	0e 94 67 03 	call	0x6ce	; 0x6ce <USARTF0_in_char>
 616:	80 93 03 22 	sts	0x2203, r24	; 0x802203 <receivedData>
	if ((gameState == 0 || gameState == 1) & receivedData == 'r')
 61a:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <gameState>
 61e:	88 23       	and	r24, r24
 620:	21 f0       	breq	.+8      	; 0x62a <__vector_119+0x6c>
 622:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <gameState>
 626:	81 30       	cpi	r24, 0x01	; 1
 628:	19 f4       	brne	.+6      	; 0x630 <__vector_119+0x72>
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	02 c0       	rjmp	.+4      	; 0x634 <__vector_119+0x76>
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	81 70       	andi	r24, 0x01	; 1
 636:	20 91 03 22 	lds	r18, 0x2203	; 0x802203 <receivedData>
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	22 37       	cpi	r18, 0x72	; 114
 63e:	09 f0       	breq	.+2      	; 0x642 <__vector_119+0x84>
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	89 23       	and	r24, r25
 644:	88 23       	and	r24, r24
 646:	19 f0       	breq	.+6      	; 0x64e <__vector_119+0x90>
	{
		otherReady = 1;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <__data_end>
	}
 64e:	00 00       	nop
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	ff 91       	pop	r31
 656:	ef 91       	pop	r30
 658:	bf 91       	pop	r27
 65a:	af 91       	pop	r26
 65c:	9f 91       	pop	r25
 65e:	8f 91       	pop	r24
 660:	7f 91       	pop	r23
 662:	6f 91       	pop	r22
 664:	5f 91       	pop	r21
 666:	4f 91       	pop	r20
 668:	3f 91       	pop	r19
 66a:	2f 91       	pop	r18
 66c:	0f 90       	pop	r0
 66e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 672:	0f 90       	pop	r0
 674:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 678:	0f 90       	pop	r0
 67a:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 67e:	0f 90       	pop	r0
 680:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 684:	0f 90       	pop	r0
 686:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <USARTF0_INIT>:
* Output: N/A
******************************************************************************/
void USARTF0_out_string(char * str)
{
	while(*str!= 0) USARTF0_out_char(*(str++));
}
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	cd b7       	in	r28, 0x3d	; 61
 696:	de b7       	in	r29, 0x3e	; 62
 698:	80 ea       	ldi	r24, 0xA0	; 160
 69a:	9b e0       	ldi	r25, 0x0B	; 11
 69c:	fc 01       	movw	r30, r24
 69e:	16 82       	std	Z+6, r1	; 0x06
 6a0:	80 ea       	ldi	r24, 0xA0	; 160
 6a2:	9b e0       	ldi	r25, 0x0B	; 11
 6a4:	fc 01       	movw	r30, r24
 6a6:	17 82       	std	Z+7, r1	; 0x07
 6a8:	80 ea       	ldi	r24, 0xA0	; 160
 6aa:	9b e0       	ldi	r25, 0x0B	; 11
 6ac:	23 e0       	ldi	r18, 0x03	; 3
 6ae:	fc 01       	movw	r30, r24
 6b0:	25 83       	std	Z+5, r18	; 0x05
 6b2:	80 ea       	ldi	r24, 0xA0	; 160
 6b4:	9b e0       	ldi	r25, 0x0B	; 11
 6b6:	28 e1       	ldi	r18, 0x18	; 24
 6b8:	fc 01       	movw	r30, r24
 6ba:	24 83       	std	Z+4, r18	; 0x04
 6bc:	80 ea       	ldi	r24, 0xA0	; 160
 6be:	9b e0       	ldi	r25, 0x0B	; 11
 6c0:	20 e2       	ldi	r18, 0x20	; 32
 6c2:	fc 01       	movw	r30, r24
 6c4:	23 83       	std	Z+3, r18	; 0x03
 6c6:	00 00       	nop
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	08 95       	ret

000006ce <USARTF0_in_char>:
* Purpose: To read in a character from the receiver within USARTF0.
* Input(s): N/A
* Output: (char)
******************************************************************************/
char USARTF0_in_char(void)
{
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	cd b7       	in	r28, 0x3d	; 61
 6d4:	de b7       	in	r29, 0x3e	; 62
 while(!(USARTF0.STATUS & USART_RXCIF_bm));
 6d6:	00 00       	nop
 6d8:	80 ea       	ldi	r24, 0xA0	; 160
 6da:	9b e0       	ldi	r25, 0x0B	; 11
 6dc:	fc 01       	movw	r30, r24
 6de:	81 81       	ldd	r24, Z+1	; 0x01
 6e0:	88 23       	and	r24, r24
 6e2:	d4 f7       	brge	.-12     	; 0x6d8 <USARTF0_in_char+0xa>
 return USARTF0.DATA;
 6e4:	80 ea       	ldi	r24, 0xA0	; 160
 6e6:	9b e0       	ldi	r25, 0x0B	; 11
 6e8:	fc 01       	movw	r30, r24
 6ea:	80 81       	ld	r24, Z
}
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	08 95       	ret

000006f2 <_exit>:
 6f2:	f8 94       	cli

000006f4 <__stop_program>:
 6f4:	ff cf       	rjmp	.-2      	; 0x6f4 <__stop_program>
