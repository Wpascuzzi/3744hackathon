
HackathonProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00802000  00802000  00000648  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004734  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d90  00000000  00000000  00004e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000960  00000000  00000000  00008c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  0000958c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f69  00000000  00000000  000097b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000403  00000000  00000000  0000c721  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000cb24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_43>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_119>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e4 ed       	ldi	r30, 0xD4	; 212
 21c:	f5 e0       	ldi	r31, 0x05	; 5
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a7 30       	cpi	r26, 0x07	; 7
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 94 01 	call	0x328	; 0x328 <main>
 244:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <PORTA_INIT>:
 */ 

#include "GPIO.h"

void PORTA_INIT(void)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRCLR = 0xFF; //sets all of PORTA to input
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	96 e0       	ldi	r25, 0x06	; 6
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	fc 01       	movw	r30, r24
 25c:	22 83       	std	Z+2, r18	; 0x02
}
 25e:	00 00       	nop
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <PORTC_INIT>:

void PORTC_INIT(void)
{
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRSET = 0xFF; //sets all of PORTF to Output
 26e:	80 e4       	ldi	r24, 0x40	; 64
 270:	96 e0       	ldi	r25, 0x06	; 6
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	fc 01       	movw	r30, r24
 276:	21 83       	std	Z+1, r18	; 0x01
	
	
}
 278:	00 00       	nop
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <PORTE_INIT>:

void PORTE_INIT(void)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRCLR = PIN0_bm | PIN1_bm; //set e1 and e0 to be input
 288:	80 e8       	ldi	r24, 0x80	; 128
 28a:	96 e0       	ldi	r25, 0x06	; 6
 28c:	23 e0       	ldi	r18, 0x03	; 3
 28e:	fc 01       	movw	r30, r24
 290:	22 83       	std	Z+2, r18	; 0x02
	PORTE.INT0MASK =  PIN0_bm; //maks e1 and e0
 292:	80 e8       	ldi	r24, 0x80	; 128
 294:	96 e0       	ldi	r25, 0x06	; 6
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	fc 01       	movw	r30, r24
 29a:	22 87       	std	Z+10, r18	; 0x0a
	PORTE.INT1MASK =  PIN1_bm;
 29c:	80 e8       	ldi	r24, 0x80	; 128
 29e:	96 e0       	ldi	r25, 0x06	; 6
 2a0:	22 e0       	ldi	r18, 0x02	; 2
 2a2:	fc 01       	movw	r30, r24
 2a4:	23 87       	std	Z+11, r18	; 0x0b
	PORTE.INTCTRL = 0b1010; //sets to midlvl interrupts
 2a6:	80 e8       	ldi	r24, 0x80	; 128
 2a8:	96 e0       	ldi	r25, 0x06	; 6
 2aa:	2a e0       	ldi	r18, 0x0A	; 10
 2ac:	fc 01       	movw	r30, r24
 2ae:	21 87       	std	Z+9, r18	; 0x09
	PORTE.PIN0CTRL = 0b010;
 2b0:	80 e8       	ldi	r24, 0x80	; 128
 2b2:	96 e0       	ldi	r25, 0x06	; 6
 2b4:	22 e0       	ldi	r18, 0x02	; 2
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL = 0b010;
 2ba:	80 e8       	ldi	r24, 0x80	; 128
 2bc:	96 e0       	ldi	r25, 0x06	; 6
 2be:	22 e0       	ldi	r18, 0x02	; 2
 2c0:	fc 01       	movw	r30, r24
 2c2:	21 8b       	std	Z+17, r18	; 0x11
	
}
 2c4:	00 00       	nop
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <PORTF_INIT>:

void PORTF_INIT(void)
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRSET = PIN3_bm | PIN4_bm | PIN5_bm; //sets 3, 4 and 5 of F to output (TX, ANALOGOUT, and POWERDOWN)
 2d4:	80 ea       	ldi	r24, 0xA0	; 160
 2d6:	96 e0       	ldi	r25, 0x06	; 6
 2d8:	28 e3       	ldi	r18, 0x38	; 56
 2da:	fc 01       	movw	r30, r24
 2dc:	21 83       	std	Z+1, r18	; 0x01
	PORTF.OUTSET = PIN5_bm; //sets POWERDOWN to VCC
 2de:	80 ea       	ldi	r24, 0xA0	; 160
 2e0:	96 e0       	ldi	r25, 0x06	; 6
 2e2:	20 e2       	ldi	r18, 0x20	; 32
 2e4:	fc 01       	movw	r30, r24
 2e6:	25 83       	std	Z+5, r18	; 0x05
	PORTF.OUTSET = PIN3_bm; //TX default val high
 2e8:	80 ea       	ldi	r24, 0xA0	; 160
 2ea:	96 e0       	ldi	r25, 0x06	; 6
 2ec:	28 e0       	ldi	r18, 0x08	; 8
 2ee:	fc 01       	movw	r30, r24
 2f0:	25 83       	std	Z+5, r18	; 0x05
	PORTF.DIRCLR = PIN2_bm; //sets RX to input
 2f2:	80 ea       	ldi	r24, 0xA0	; 160
 2f4:	96 e0       	ldi	r25, 0x06	; 6
 2f6:	24 e0       	ldi	r18, 0x04	; 4
 2f8:	fc 01       	movw	r30, r24
 2fa:	22 83       	std	Z+2, r18	; 0x02
	
}
 2fc:	00 00       	nop
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <PORTD_INIT>:

void PORTD_INIT(void)
{
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
	PORTD.DIRSET = PIN4_bm | PIN5_bm | PIN6_bm;
 30c:	80 e6       	ldi	r24, 0x60	; 96
 30e:	96 e0       	ldi	r25, 0x06	; 6
 310:	20 e7       	ldi	r18, 0x70	; 112
 312:	fc 01       	movw	r30, r24
 314:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTSET = PIN4_bm | PIN5_bm | PIN6_bm;
 316:	80 e6       	ldi	r24, 0x60	; 96
 318:	96 e0       	ldi	r25, 0x06	; 6
 31a:	20 e7       	ldi	r18, 0x70	; 112
 31c:	fc 01       	movw	r30, r24
 31e:	25 83       	std	Z+5, r18	; 0x05
 320:	00 00       	nop
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <main>:
volatile uint8_t s1Set = 0;
volatile uint8_t receivedSet = 0;
volatile uint8_t receivedData = 0;

int main(void)
{
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
	
	
	PORTA_INIT();
 330:	0e 94 26 01 	call	0x24c	; 0x24c <PORTA_INIT>
	PORTC_INIT();
 334:	0e 94 33 01 	call	0x266	; 0x266 <PORTC_INIT>
	PORTF_INIT();
 338:	0e 94 66 01 	call	0x2cc	; 0x2cc <PORTF_INIT>
	PORTE_INIT();
 33c:	0e 94 40 01 	call	0x280	; 0x280 <PORTE_INIT>
	USARTF0_INIT();
 340:	0e 94 9c 02 	call	0x538	; 0x538 <USARTF0_INIT>
	PORTD_INIT();
 344:	0e 94 82 01 	call	0x304	; 0x304 <PORTD_INIT>

	PMIC.CTRL |= PMIC_MEDLVLEN_bm; //enable mid lvl interrupts
 348:	80 ea       	ldi	r24, 0xA0	; 160
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	20 ea       	ldi	r18, 0xA0	; 160
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	f9 01       	movw	r30, r18
 352:	22 81       	ldd	r18, Z+2	; 0x02
 354:	22 60       	ori	r18, 0x02	; 2
 356:	fc 01       	movw	r30, r24
 358:	22 83       	std	Z+2, r18	; 0x02
	sei();
 35a:	78 94       	sei
	
    while (1) 
    {
		switch(gameState)
 35c:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <gameState>
 360:	88 2f       	mov	r24, r24
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	91 05       	cpc	r25, r1
 368:	71 f1       	breq	.+92     	; 0x3c6 <main+0x9e>
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	91 05       	cpc	r25, r1
 36e:	09 f4       	brne	.+2      	; 0x372 <main+0x4a>
 370:	43 c0       	rjmp	.+134    	; 0x3f8 <main+0xd0>
 372:	89 2b       	or	r24, r25
 374:	09 f0       	breq	.+2      	; 0x378 <main+0x50>
 376:	4e c0       	rjmp	.+156    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		{
		//preparation stage
		case 0:
			PORTD_OUTSET = PIN4_bm | PIN5_bm | PIN6_bm;
 378:	85 e6       	ldi	r24, 0x65	; 101
 37a:	96 e0       	ldi	r25, 0x06	; 6
 37c:	20 e7       	ldi	r18, 0x70	; 112
 37e:	fc 01       	movw	r30, r24
 380:	20 83       	st	Z, r18
			PORTD.OUTCLR = PIN5_bm;
 382:	80 e6       	ldi	r24, 0x60	; 96
 384:	96 e0       	ldi	r25, 0x06	; 6
 386:	20 e2       	ldi	r18, 0x20	; 32
 388:	fc 01       	movw	r30, r24
 38a:	26 83       	std	Z+6, r18	; 0x06
			switchData = PORTA.IN;
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	96 e0       	ldi	r25, 0x06	; 6
 390:	fc 01       	movw	r30, r24
 392:	80 85       	ldd	r24, Z+8	; 0x08
 394:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_end>
			ledData = switchData;
 398:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_end>
 39c:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <ledData>
			PORTC.OUT = ledData;
 3a0:	80 e4       	ldi	r24, 0x40	; 64
 3a2:	96 e0       	ldi	r25, 0x06	; 6
 3a4:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <ledData>
 3a8:	fc 01       	movw	r30, r24
 3aa:	24 83       	std	Z+4, r18	; 0x04
			
			//debouncing
			//TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;
			//while(!(TCC0_INTFLAGS & 1)); //waits for ovf flag to be set
			//TCC0_INTFLAGS = 0; //resets ovf flag
			if(s1Set)
 3ac:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <s1Set>
 3b0:	88 23       	and	r24, r24
 3b2:	69 f1       	breq	.+90     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			{	
				selfReady = 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <selfReady>
				gameState = 1;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <gameState>
				s1Set = 0;
 3c0:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <s1Set>
			}
		break;
 3c4:	24 c0       	rjmp	.+72     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		
		//waiting stage
		case 1:
			PORTD_OUTSET = PIN4_bm | PIN5_bm | PIN6_bm;
 3c6:	85 e6       	ldi	r24, 0x65	; 101
 3c8:	96 e0       	ldi	r25, 0x06	; 6
 3ca:	20 e7       	ldi	r18, 0x70	; 112
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
			PORTD_OUTCLR = PIN6_bm; //sets blue pin
 3d0:	86 e6       	ldi	r24, 0x66	; 102
 3d2:	96 e0       	ldi	r25, 0x06	; 6
 3d4:	20 e4       	ldi	r18, 0x40	; 64
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 83       	st	Z, r18
			USARTF0_out_char('r'); //sends ready
 3da:	82 e7       	ldi	r24, 0x72	; 114
 3dc:	0e 94 bb 02 	call	0x576	; 0x576 <USARTF0_out_char>
			
			
			if(selfReady && otherReady)
 3e0:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <selfReady>
 3e4:	88 23       	and	r24, r24
 3e6:	a9 f0       	breq	.+42     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3e8:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <otherReady>
 3ec:	88 23       	and	r24, r24
 3ee:	89 f0       	breq	.+34     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			{
				//may want to add a timer delay to prevent issues
				gameState = 2;
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <gameState>
			}
		break;
 3f6:	0d c0       	rjmp	.+26     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		
		//transmitting stage
		case 2:
		
			PORTD_OUTSET = PIN4_bm | PIN5_bm | PIN6_bm;
 3f8:	85 e6       	ldi	r24, 0x65	; 101
 3fa:	96 e0       	ldi	r25, 0x06	; 6
 3fc:	20 e7       	ldi	r18, 0x70	; 112
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
			PORTD_OUTCLR = PIN4_bm;
 402:	86 e6       	ldi	r24, 0x66	; 102
 404:	96 e0       	ldi	r25, 0x06	; 6
 406:	20 e1       	ldi	r18, 0x10	; 16
 408:	fc 01       	movw	r30, r24
 40a:	20 83       	st	Z, r18
			
			
		break;
 40c:	03 c0       	rjmp	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			{	
				selfReady = 1;
				gameState = 1;
				s1Set = 0;
			}
		break;
 40e:	00 00       	nop
 410:	a5 cf       	rjmp	.-182    	; 0x35c <main+0x34>
			if(selfReady && otherReady)
			{
				//may want to add a timer delay to prevent issues
				gameState = 2;
			}
		break;
 412:	00 00       	nop
		break;
		
		}
	
		
	}
 414:	a3 cf       	rjmp	.-186    	; 0x35c <main+0x34>

00000416 <__vector_43>:
}


//triggered when S1 is pressed
ISR(PORTE_INT0_vect)
{
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 426:	0f 92       	push	r0
 428:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 42c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 430:	0f 92       	push	r0
 432:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 436:	8f 93       	push	r24
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
	
	//s1 set
	s1Set = 1;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <s1Set>
	
}
 446:	00 00       	nop
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	8f 91       	pop	r24
 44e:	0f 90       	pop	r0
 450:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 454:	0f 90       	pop	r0
 456:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 45a:	0f 90       	pop	r0
 45c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 460:	0f 90       	pop	r0
 462:	1f 90       	pop	r1
 464:	18 95       	reti

00000466 <__vector_119>:

ISR(USARTF0_RXC_vect)
{
 466:	1f 92       	push	r1
 468:	0f 92       	push	r0
 46a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 476:	0f 92       	push	r0
 478:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 47c:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 480:	0f 92       	push	r0
 482:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 486:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 48a:	0f 92       	push	r0
 48c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 490:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 494:	0f 92       	push	r0
 496:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 49a:	2f 93       	push	r18
 49c:	3f 93       	push	r19
 49e:	4f 93       	push	r20
 4a0:	5f 93       	push	r21
 4a2:	6f 93       	push	r22
 4a4:	7f 93       	push	r23
 4a6:	8f 93       	push	r24
 4a8:	9f 93       	push	r25
 4aa:	af 93       	push	r26
 4ac:	bf 93       	push	r27
 4ae:	ef 93       	push	r30
 4b0:	ff 93       	push	r31
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
	
	receivedData = USARTF0_in_char();
 4ba:	0e 94 d6 02 	call	0x5ac	; 0x5ac <USARTF0_in_char>
 4be:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <receivedData>
	if ((gameState == 0 || gameState == 1) & receivedData == 'r')
 4c2:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <gameState>
 4c6:	88 23       	and	r24, r24
 4c8:	21 f0       	breq	.+8      	; 0x4d2 <__vector_119+0x6c>
 4ca:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <gameState>
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	19 f4       	brne	.+6      	; 0x4d8 <__vector_119+0x72>
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__vector_119+0x76>
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	81 70       	andi	r24, 0x01	; 1
 4de:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <receivedData>
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	22 37       	cpi	r18, 0x72	; 114
 4e6:	09 f0       	breq	.+2      	; 0x4ea <__vector_119+0x84>
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	89 23       	and	r24, r25
 4ec:	88 23       	and	r24, r24
 4ee:	19 f0       	breq	.+6      	; 0x4f6 <__vector_119+0x90>
	{
		otherReady = 1;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <otherReady>
	}
 4f6:	00 00       	nop
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	ff 91       	pop	r31
 4fe:	ef 91       	pop	r30
 500:	bf 91       	pop	r27
 502:	af 91       	pop	r26
 504:	9f 91       	pop	r25
 506:	8f 91       	pop	r24
 508:	7f 91       	pop	r23
 50a:	6f 91       	pop	r22
 50c:	5f 91       	pop	r21
 50e:	4f 91       	pop	r20
 510:	3f 91       	pop	r19
 512:	2f 91       	pop	r18
 514:	0f 90       	pop	r0
 516:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 51a:	0f 90       	pop	r0
 51c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 520:	0f 90       	pop	r0
 522:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 526:	0f 90       	pop	r0
 528:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 52c:	0f 90       	pop	r0
 52e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 532:	0f 90       	pop	r0
 534:	1f 90       	pop	r1
 536:	18 95       	reti

00000538 <USARTF0_INIT>:
* Output: N/A
******************************************************************************/
void USARTF0_out_string(char * str)
{
	while(*str!= 0) USARTF0_out_char(*(str++));
}
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
 540:	80 ea       	ldi	r24, 0xA0	; 160
 542:	9b e0       	ldi	r25, 0x0B	; 11
 544:	fc 01       	movw	r30, r24
 546:	16 82       	std	Z+6, r1	; 0x06
 548:	80 ea       	ldi	r24, 0xA0	; 160
 54a:	9b e0       	ldi	r25, 0x0B	; 11
 54c:	fc 01       	movw	r30, r24
 54e:	17 82       	std	Z+7, r1	; 0x07
 550:	80 ea       	ldi	r24, 0xA0	; 160
 552:	9b e0       	ldi	r25, 0x0B	; 11
 554:	23 e0       	ldi	r18, 0x03	; 3
 556:	fc 01       	movw	r30, r24
 558:	25 83       	std	Z+5, r18	; 0x05
 55a:	80 ea       	ldi	r24, 0xA0	; 160
 55c:	9b e0       	ldi	r25, 0x0B	; 11
 55e:	28 e1       	ldi	r18, 0x18	; 24
 560:	fc 01       	movw	r30, r24
 562:	24 83       	std	Z+4, r18	; 0x04
 564:	80 ea       	ldi	r24, 0xA0	; 160
 566:	9b e0       	ldi	r25, 0x0B	; 11
 568:	20 e2       	ldi	r18, 0x20	; 32
 56a:	fc 01       	movw	r30, r24
 56c:	23 83       	std	Z+3, r18	; 0x03
 56e:	00 00       	nop
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <USARTF0_out_char>:
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	1f 92       	push	r1
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	89 83       	std	Y+1, r24	; 0x01
 582:	00 00       	nop
 584:	80 ea       	ldi	r24, 0xA0	; 160
 586:	9b e0       	ldi	r25, 0x0B	; 11
 588:	fc 01       	movw	r30, r24
 58a:	81 81       	ldd	r24, Z+1	; 0x01
 58c:	88 2f       	mov	r24, r24
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	80 72       	andi	r24, 0x20	; 32
 592:	99 27       	eor	r25, r25
 594:	89 2b       	or	r24, r25
 596:	b1 f3       	breq	.-20     	; 0x584 <USARTF0_out_char+0xe>
 598:	80 ea       	ldi	r24, 0xA0	; 160
 59a:	9b e0       	ldi	r25, 0x0B	; 11
 59c:	29 81       	ldd	r18, Y+1	; 0x01
 59e:	fc 01       	movw	r30, r24
 5a0:	20 83       	st	Z, r18
 5a2:	00 00       	nop
 5a4:	0f 90       	pop	r0
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	08 95       	ret

000005ac <USARTF0_in_char>:
* Purpose: To read in a character from the receiver within USARTF0.
* Input(s): N/A
* Output: (char)
******************************************************************************/
char USARTF0_in_char(void)
{
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
 while(!(USARTF0.STATUS & USART_RXCIF_bm));
 5b4:	00 00       	nop
 5b6:	80 ea       	ldi	r24, 0xA0	; 160
 5b8:	9b e0       	ldi	r25, 0x0B	; 11
 5ba:	fc 01       	movw	r30, r24
 5bc:	81 81       	ldd	r24, Z+1	; 0x01
 5be:	88 23       	and	r24, r24
 5c0:	d4 f7       	brge	.-12     	; 0x5b6 <USARTF0_in_char+0xa>
 return USARTF0.DATA;
 5c2:	80 ea       	ldi	r24, 0xA0	; 160
 5c4:	9b e0       	ldi	r25, 0x0B	; 11
 5c6:	fc 01       	movw	r30, r24
 5c8:	80 81       	ld	r24, Z
}
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	08 95       	ret

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
