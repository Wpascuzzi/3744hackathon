
HackathonProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  000009fa  00000a8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00802004  00802004  00000a92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000054d0  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f0b  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c2b  00000000  00000000  00009fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  0000abe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000033e8  00000000  00000000  0000aea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000549  00000000  00000000  0000e290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000e7d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 19 01 	jmp	0x232	; 0x232 <__ctors_end>
   4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
   8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
   c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  10:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  14:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  18:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  1c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  20:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  24:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  28:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  2c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  30:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  34:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  38:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  3c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  40:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  44:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  48:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  4c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  50:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  54:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  58:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  5c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  60:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  64:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  68:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  6c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  70:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  74:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  78:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  7c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  80:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  84:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  88:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  8c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  90:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  94:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  98:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  9c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  a0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  a4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  a8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  ac:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__vector_43>
  b0:	0c 94 17 03 	jmp	0x62e	; 0x62e <__vector_44>
  b4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  b8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  bc:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  c0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  c4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  c8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  cc:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  d0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  d4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  d8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  dc:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  e0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  e4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  e8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  ec:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  f0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  f4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  f8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
  fc:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 100:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 104:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 108:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 10c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 110:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 114:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 118:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 11c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 120:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 124:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 128:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 12c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 130:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 134:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 138:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 13c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 140:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 144:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 148:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 14c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 150:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 154:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 158:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 15c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 160:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 164:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 168:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 16c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 170:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 174:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 178:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 17c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 180:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 184:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 188:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 18c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 190:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 194:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 198:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 19c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1a0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1a4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1a8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1ac:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1b0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1b4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1b8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1bc:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1c0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1c4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1c8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1cc:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1d0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1d4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1d8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1dc:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_119>
 1e0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1e4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1e8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1ec:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1f0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1f4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1f8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
 1fc:	ce 03       	fmulsu	r20, r22
 1fe:	c7 03       	fmuls	r20, r23
 200:	c2 03       	fmuls	r20, r18
 202:	bd 03       	fmulsu	r19, r21
 204:	b8 03       	fmulsu	r19, r16
 206:	b3 03       	fmuls	r19, r19
 208:	ae 03       	fmulsu	r18, r22
 20a:	a9 03       	fmulsu	r18, r17
 20c:	a4 03       	fmuls	r18, r20

0000020e <__trampolines_start>:
 20e:	0c 94 b3 03 	jmp	0x766	; 0x766 <__vector_43+0xe8>
 212:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__vector_43+0x11e>
 216:	0c 94 c2 03 	jmp	0x784	; 0x784 <__vector_43+0x106>
 21a:	0c 94 a4 03 	jmp	0x748	; 0x748 <__vector_43+0xca>
 21e:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_43+0xf2>
 222:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__vector_43+0xde>
 226:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_43+0x110>
 22a:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_43+0xd4>
 22e:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_43+0xfc>

00000232 <__ctors_end>:
 232:	11 24       	eor	r1, r1
 234:	1f be       	out	0x3f, r1	; 63
 236:	cf ef       	ldi	r28, 0xFF	; 255
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	df e3       	ldi	r29, 0x3F	; 63
 23c:	de bf       	out	0x3e, r29	; 62
 23e:	00 e0       	ldi	r16, 0x00	; 0
 240:	0c bf       	out	0x3c, r16	; 60
 242:	18 be       	out	0x38, r1	; 56
 244:	19 be       	out	0x39, r1	; 57
 246:	1a be       	out	0x3a, r1	; 58
 248:	1b be       	out	0x3b, r1	; 59

0000024a <__do_copy_data>:
 24a:	10 e2       	ldi	r17, 0x20	; 32
 24c:	a0 e0       	ldi	r26, 0x00	; 0
 24e:	b0 e2       	ldi	r27, 0x20	; 32
 250:	ea ef       	ldi	r30, 0xFA	; 250
 252:	f9 e0       	ldi	r31, 0x09	; 9
 254:	00 e0       	ldi	r16, 0x00	; 0
 256:	0b bf       	out	0x3b, r16	; 59
 258:	02 c0       	rjmp	.+4      	; 0x25e <__do_copy_data+0x14>
 25a:	07 90       	elpm	r0, Z+
 25c:	0d 92       	st	X+, r0
 25e:	a4 30       	cpi	r26, 0x04	; 4
 260:	b1 07       	cpc	r27, r17
 262:	d9 f7       	brne	.-10     	; 0x25a <__do_copy_data+0x10>
 264:	1b be       	out	0x3b, r1	; 59

00000266 <__do_clear_bss>:
 266:	20 e2       	ldi	r18, 0x20	; 32
 268:	a4 e0       	ldi	r26, 0x04	; 4
 26a:	b0 e2       	ldi	r27, 0x20	; 32
 26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
 26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
 270:	ae 30       	cpi	r26, 0x0E	; 14
 272:	b2 07       	cpc	r27, r18
 274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
 276:	0e 94 af 01 	call	0x35e	; 0x35e <main>
 27a:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <_exit>

0000027e <__bad_interrupt>:
 27e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000282 <PORTA_INIT>:
 */ 

#include "GPIO.h"

void PORTA_INIT(void)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRCLR = 0xFF; //sets all of PORTA to input
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	96 e0       	ldi	r25, 0x06	; 6
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	fc 01       	movw	r30, r24
 292:	22 83       	std	Z+2, r18	; 0x02
}
 294:	00 00       	nop
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <PORTC_INIT>:

void PORTC_INIT(void)
{
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
	PORTC.DIRSET = 0xFF; //sets all of PORTF to Output
 2a4:	80 e4       	ldi	r24, 0x40	; 64
 2a6:	96 e0       	ldi	r25, 0x06	; 6
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	fc 01       	movw	r30, r24
 2ac:	21 83       	std	Z+1, r18	; 0x01
	
	
}
 2ae:	00 00       	nop
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <PORTE_INIT>:

void PORTE_INIT(void)
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRCLR = PIN0_bm | PIN1_bm; //set e1 and e0 to be input
 2be:	80 e8       	ldi	r24, 0x80	; 128
 2c0:	96 e0       	ldi	r25, 0x06	; 6
 2c2:	23 e0       	ldi	r18, 0x03	; 3
 2c4:	fc 01       	movw	r30, r24
 2c6:	22 83       	std	Z+2, r18	; 0x02
	PORTE.INT0MASK =  PIN0_bm; //defender set/score
 2c8:	80 e8       	ldi	r24, 0x80	; 128
 2ca:	96 e0       	ldi	r25, 0x06	; 6
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	fc 01       	movw	r30, r24
 2d0:	22 87       	std	Z+10, r18	; 0x0a
	PORTE.INT1MASK =  PIN1_bm; //ready button
 2d2:	80 e8       	ldi	r24, 0x80	; 128
 2d4:	96 e0       	ldi	r25, 0x06	; 6
 2d6:	22 e0       	ldi	r18, 0x02	; 2
 2d8:	fc 01       	movw	r30, r24
 2da:	23 87       	std	Z+11, r18	; 0x0b
	PORTE.INTCTRL = 0b1010; //sets to midlvl interrupts
 2dc:	80 e8       	ldi	r24, 0x80	; 128
 2de:	96 e0       	ldi	r25, 0x06	; 6
 2e0:	2a e0       	ldi	r18, 0x0A	; 10
 2e2:	fc 01       	movw	r30, r24
 2e4:	21 87       	std	Z+9, r18	; 0x09
	PORTE.PIN0CTRL = 0b011;
 2e6:	80 e8       	ldi	r24, 0x80	; 128
 2e8:	96 e0       	ldi	r25, 0x06	; 6
 2ea:	23 e0       	ldi	r18, 0x03	; 3
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 8b       	std	Z+16, r18	; 0x10
	PORTE.PIN1CTRL = 0b010;
 2f0:	80 e8       	ldi	r24, 0x80	; 128
 2f2:	96 e0       	ldi	r25, 0x06	; 6
 2f4:	22 e0       	ldi	r18, 0x02	; 2
 2f6:	fc 01       	movw	r30, r24
 2f8:	21 8b       	std	Z+17, r18	; 0x11
	
}
 2fa:	00 00       	nop
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <PORTF_INIT>:

void PORTF_INIT(void)
{
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRSET = PIN3_bm | PIN4_bm | PIN5_bm; //sets 3, 4 and 5 of F to output (TX, ANALOGOUT, and POWERDOWN)
 30a:	80 ea       	ldi	r24, 0xA0	; 160
 30c:	96 e0       	ldi	r25, 0x06	; 6
 30e:	28 e3       	ldi	r18, 0x38	; 56
 310:	fc 01       	movw	r30, r24
 312:	21 83       	std	Z+1, r18	; 0x01
	PORTF.OUTSET = PIN5_bm; //sets POWERDOWN to VCC
 314:	80 ea       	ldi	r24, 0xA0	; 160
 316:	96 e0       	ldi	r25, 0x06	; 6
 318:	20 e2       	ldi	r18, 0x20	; 32
 31a:	fc 01       	movw	r30, r24
 31c:	25 83       	std	Z+5, r18	; 0x05
	PORTF.OUTSET = PIN3_bm; //TX default val high
 31e:	80 ea       	ldi	r24, 0xA0	; 160
 320:	96 e0       	ldi	r25, 0x06	; 6
 322:	28 e0       	ldi	r18, 0x08	; 8
 324:	fc 01       	movw	r30, r24
 326:	25 83       	std	Z+5, r18	; 0x05
	PORTF.DIRCLR = PIN2_bm; //sets RX to input
 328:	80 ea       	ldi	r24, 0xA0	; 160
 32a:	96 e0       	ldi	r25, 0x06	; 6
 32c:	24 e0       	ldi	r18, 0x04	; 4
 32e:	fc 01       	movw	r30, r24
 330:	22 83       	std	Z+2, r18	; 0x02
	
}
 332:	00 00       	nop
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <PORTD_INIT>:

void PORTD_INIT(void)
{
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
	PORTD.DIRSET = PIN4_bm | PIN5_bm | PIN6_bm;
 342:	80 e6       	ldi	r24, 0x60	; 96
 344:	96 e0       	ldi	r25, 0x06	; 6
 346:	20 e7       	ldi	r18, 0x70	; 112
 348:	fc 01       	movw	r30, r24
 34a:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTSET = PIN4_bm | PIN5_bm | PIN6_bm;
 34c:	80 e6       	ldi	r24, 0x60	; 96
 34e:	96 e0       	ldi	r25, 0x06	; 6
 350:	20 e7       	ldi	r18, 0x70	; 112
 352:	fc 01       	movw	r30, r24
 354:	25 83       	std	Z+5, r18	; 0x05
 356:	00 00       	nop
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <main>:
volatile uint8_t enemyData = 0;
volatile uint8_t score = 0;
volatile uint8_t defSet = 0;

int main(void)
{
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	1f 92       	push	r1
 364:	1f 92       	push	r1
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
	
	
	PORTA_INIT();
 36a:	0e 94 41 01 	call	0x282	; 0x282 <PORTA_INIT>
	PORTC_INIT();
 36e:	0e 94 4e 01 	call	0x29c	; 0x29c <PORTC_INIT>
	PORTF_INIT();
 372:	0e 94 81 01 	call	0x302	; 0x302 <PORTF_INIT>
	PORTE_INIT();
 376:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <PORTE_INIT>
	USARTF0_INIT();
 37a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <USARTF0_INIT>
	PORTD_INIT();
 37e:	0e 94 9d 01 	call	0x33a	; 0x33a <PORTD_INIT>
	timer_init(0);
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 5d 04 	call	0x8ba	; 0x8ba <timer_init>

	PMIC.CTRL |= PMIC_MEDLVLEN_bm; //enable mid lvl interrupts
 388:	80 ea       	ldi	r24, 0xA0	; 160
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	20 ea       	ldi	r18, 0xA0	; 160
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	f9 01       	movw	r30, r18
 392:	22 81       	ldd	r18, Z+2	; 0x02
 394:	22 60       	ori	r18, 0x02	; 2
 396:	fc 01       	movw	r30, r24
 398:	22 83       	std	Z+2, r18	; 0x02
	sei();
 39a:	78 94       	sei
	
    while (1) 
    {
		switch(gameState)
 39c:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <gameState>
 3a0:	88 2f       	mov	r24, r24
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	91 05       	cpc	r25, r1
 3a8:	09 f4       	brne	.+2      	; 0x3ac <main+0x4e>
 3aa:	61 c0       	rjmp	.+194    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 3ac:	83 30       	cpi	r24, 0x03	; 3
 3ae:	91 05       	cpc	r25, r1
 3b0:	2c f4       	brge	.+10     	; 0x3bc <main+0x5e>
 3b2:	00 97       	sbiw	r24, 0x00	; 0
 3b4:	59 f0       	breq	.+22     	; 0x3cc <main+0x6e>
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	b9 f1       	breq	.+110    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3ba:	38 c1       	rjmp	.+624    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 3bc:	83 30       	cpi	r24, 0x03	; 3
 3be:	91 05       	cpc	r25, r1
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <main+0x66>
 3c2:	91 c0       	rjmp	.+290    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 3c4:	04 97       	sbiw	r24, 0x04	; 4
 3c6:	09 f4       	brne	.+2      	; 0x3ca <main+0x6c>
 3c8:	c0 c0       	rjmp	.+384    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 3ca:	30 c1       	rjmp	.+608    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
		{
		//preparation stage
		case 0:
		selfReady = 0;
 3cc:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <selfReady>
		otherReady = 0;
 3d0:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <otherReady>
		s1Set = 0;
 3d4:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <s1Set>
			PORTD_OUTSET = PIN4_bm | PIN5_bm | PIN6_bm;
 3d8:	85 e6       	ldi	r24, 0x65	; 101
 3da:	96 e0       	ldi	r25, 0x06	; 6
 3dc:	20 e7       	ldi	r18, 0x70	; 112
 3de:	fc 01       	movw	r30, r24
 3e0:	20 83       	st	Z, r18
			PORTD.OUTCLR = PIN5_bm;
 3e2:	80 e6       	ldi	r24, 0x60	; 96
 3e4:	96 e0       	ldi	r25, 0x06	; 6
 3e6:	20 e2       	ldi	r18, 0x20	; 32
 3e8:	fc 01       	movw	r30, r24
 3ea:	26 83       	std	Z+6, r18	; 0x06
			switchData = PORTA.IN;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	96 e0       	ldi	r25, 0x06	; 6
 3f0:	fc 01       	movw	r30, r24
 3f2:	80 85       	ldd	r24, Z+8	; 0x08
 3f4:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <__data_end>
			ledData = switchData;
 3f8:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__data_end>
 3fc:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <ledData>
			PORTC.OUT = ledData;
 400:	80 e4       	ldi	r24, 0x40	; 64
 402:	96 e0       	ldi	r25, 0x06	; 6
 404:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <ledData>
 408:	fc 01       	movw	r30, r24
 40a:	24 83       	std	Z+4, r18	; 0x04
			
			//debouncing
			//TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;
			//while(!(TCC0_INTFLAGS & 1)); //waits for ovf flag to be set
			//TCC0_INTFLAGS = 0; //resets ovf flag
			if(s1Set)
 40c:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <s1Set>
 410:	88 23       	and	r24, r24
 412:	09 f4       	brne	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 414:	08 c1       	rjmp	.+528    	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
			{	
				selfReady = 1;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <selfReady>
				gameState = 1;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <gameState>
				s1Set = 0;
 422:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <s1Set>
			}
			//USARTF0_out_char(0xFF);
		break;
 426:	ff c0       	rjmp	.+510    	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
		
		//waiting stage
		case 1:
			defSet = 1;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <defSet>
			PORTC.OUT = 0xFF; //clears LEDs
 42e:	80 e4       	ldi	r24, 0x40	; 64
 430:	96 e0       	ldi	r25, 0x06	; 6
 432:	2f ef       	ldi	r18, 0xFF	; 255
 434:	fc 01       	movw	r30, r24
 436:	24 83       	std	Z+4, r18	; 0x04
			PORTD_OUTSET = PIN4_bm | PIN5_bm | PIN6_bm;
 438:	85 e6       	ldi	r24, 0x65	; 101
 43a:	96 e0       	ldi	r25, 0x06	; 6
 43c:	20 e7       	ldi	r18, 0x70	; 112
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
			PORTD_OUTCLR = PIN6_bm; //sets blue pin
 442:	86 e6       	ldi	r24, 0x66	; 102
 444:	96 e0       	ldi	r25, 0x06	; 6
 446:	20 e4       	ldi	r18, 0x40	; 64
 448:	fc 01       	movw	r30, r24
 44a:	20 83       	st	Z, r18
			USARTF0_out_char('r'); //sends ready
 44c:	82 e7       	ldi	r24, 0x72	; 114
 44e:	0e 94 9d 04 	call	0x93a	; 0x93a <USARTF0_out_char>
			
			
			if(selfReady && otherReady)
 452:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <selfReady>
 456:	88 23       	and	r24, r24
 458:	09 f4       	brne	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45a:	e7 c0       	rjmp	.+462    	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 45c:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <otherReady>
 460:	88 23       	and	r24, r24
 462:	09 f4       	brne	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 464:	e2 c0       	rjmp	.+452    	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
			{
				//may want to add a timer delay to prevent issues
				gameState = 2;
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <gameState>
			}
			
		break;
 46c:	de c0       	rjmp	.+444    	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
		
		//transmitting stage
		case 2:
		PORTC.OUT = 0xFF; //clears LEDs
 46e:	80 e4       	ldi	r24, 0x40	; 64
 470:	96 e0       	ldi	r25, 0x06	; 6
 472:	2f ef       	ldi	r18, 0xFF	; 255
 474:	fc 01       	movw	r30, r24
 476:	24 83       	std	Z+4, r18	; 0x04
		PORTD_OUTSET = PIN4_bm | PIN5_bm | PIN6_bm;
 478:	85 e6       	ldi	r24, 0x65	; 101
 47a:	96 e0       	ldi	r25, 0x06	; 6
 47c:	20 e7       	ldi	r18, 0x70	; 112
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
		PORTD_OUTCLR = PIN4_bm;
 482:	86 e6       	ldi	r24, 0x66	; 102
 484:	96 e0       	ldi	r25, 0x06	; 6
 486:	20 e1       	ldi	r18, 0x10	; 16
 488:	fc 01       	movw	r30, r24
 48a:	20 83       	st	Z, r18
		
		TCC0.CNT = 0;
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	98 e0       	ldi	r25, 0x08	; 8
 490:	fc 01       	movw	r30, r24
 492:	10 a2       	std	Z+32, r1	; 0x20
 494:	11 a2       	std	Z+33, r1	; 0x21
		TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	98 e0       	ldi	r25, 0x08	; 8
 49a:	27 e0       	ldi	r18, 0x07	; 7
 49c:	fc 01       	movw	r30, r24
 49e:	20 83       	st	Z, r18
		//attacker transmits first
		if(attacker)
 4a0:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 4a4:	88 23       	and	r24, r24
 4a6:	79 f0       	breq	.+30     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
		{
		while(!(TCC0_INTFLAGS & 1))
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
			{
			
			USARTF0_out_char(ledData); //transmits LED DATA
 4aa:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <ledData>
 4ae:	0e 94 9d 04 	call	0x93a	; 0x93a <USARTF0_out_char>
		TCC0.CNT = 0;
		TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;
		//attacker transmits first
		if(attacker)
		{
		while(!(TCC0_INTFLAGS & 1))
 4b2:	8c e0       	ldi	r24, 0x0C	; 12
 4b4:	98 e0       	ldi	r25, 0x08	; 8
 4b6:	fc 01       	movw	r30, r24
 4b8:	80 81       	ld	r24, Z
 4ba:	88 2f       	mov	r24, r24
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	81 70       	andi	r24, 0x01	; 1
 4c0:	99 27       	eor	r25, r25
 4c2:	89 2b       	or	r24, r25
 4c4:	91 f3       	breq	.-28     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
			
			USARTF0_out_char(ledData); //transmits LED DATA
			
			}
		}
		if(!attacker)
 4c6:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 4ca:	88 23       	and	r24, r24
 4cc:	21 f4       	brne	.+8      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
		{
			//for(int j = 20000; j > 0; j--)
			{
				enemyData = USARTF0_in_char();
 4ce:	0e 94 b8 04 	call	0x970	; 0x970 <USARTF0_in_char>
 4d2:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <enemyData>
			}
		}
		
		TCC0_INTFLAGS = 1; //resets ovf flag
 4d6:	8c e0       	ldi	r24, 0x0C	; 12
 4d8:	98 e0       	ldi	r25, 0x08	; 8
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	fc 01       	movw	r30, r24
 4de:	20 83       	st	Z, r18
			
			gameState = 3;
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <gameState>
			
		case 3:
			PORTC.OUT = 0xFF; //clears LEDs
 4e6:	80 e4       	ldi	r24, 0x40	; 64
 4e8:	96 e0       	ldi	r25, 0x06	; 6
 4ea:	2f ef       	ldi	r18, 0xFF	; 255
 4ec:	fc 01       	movw	r30, r24
 4ee:	24 83       	std	Z+4, r18	; 0x04
			PORTD_OUTCLR = PIN5_bm;
 4f0:	86 e6       	ldi	r24, 0x66	; 102
 4f2:	96 e0       	ldi	r25, 0x06	; 6
 4f4:	20 e2       	ldi	r18, 0x20	; 32
 4f6:	fc 01       	movw	r30, r24
 4f8:	20 83       	st	Z, r18
			TCC0.CNT = 0;
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	98 e0       	ldi	r25, 0x08	; 8
 4fe:	fc 01       	movw	r30, r24
 500:	10 a2       	std	Z+32, r1	; 0x20
 502:	11 a2       	std	Z+33, r1	; 0x21
			if(!attacker)
 504:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 508:	88 23       	and	r24, r24
 50a:	79 f4       	brne	.+30     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
			{
				while(!(TCC0_INTFLAGS & 1))
 50c:	04 c0       	rjmp	.+8      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
				{
					
					USARTF0_out_char(ledData); //transmits LED DATA
 50e:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <ledData>
 512:	0e 94 9d 04 	call	0x93a	; 0x93a <USARTF0_out_char>
			PORTC.OUT = 0xFF; //clears LEDs
			PORTD_OUTCLR = PIN5_bm;
			TCC0.CNT = 0;
			if(!attacker)
			{
				while(!(TCC0_INTFLAGS & 1))
 516:	8c e0       	ldi	r24, 0x0C	; 12
 518:	98 e0       	ldi	r25, 0x08	; 8
 51a:	fc 01       	movw	r30, r24
 51c:	80 81       	ld	r24, Z
 51e:	88 2f       	mov	r24, r24
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	81 70       	andi	r24, 0x01	; 1
 524:	99 27       	eor	r25, r25
 526:	89 2b       	or	r24, r25
 528:	91 f3       	breq	.-28     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
					
					USARTF0_out_char(ledData); //transmits LED DATA
					
				}
			}
			if(attacker)
 52a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 52e:	88 23       	and	r24, r24
 530:	21 f0       	breq	.+8      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
			{
				//for(int j = 20000; j > 0; j--)
				{
					enemyData = USARTF0_in_char();
 532:	0e 94 b8 04 	call	0x970	; 0x970 <USARTF0_in_char>
 536:	80 93 0b 20 	sts	0x200B, r24	; 0x80200b <enemyData>
				}
			}
			TCC0_INTFLAGS = 1; //resets ovf flag
 53a:	8c e0       	ldi	r24, 0x0C	; 12
 53c:	98 e0       	ldi	r25, 0x08	; 8
 53e:	21 e0       	ldi	r18, 0x01	; 1
 540:	fc 01       	movw	r30, r24
 542:	20 83       	st	Z, r18
			
				gameState = 4;
 544:	84 e0       	ldi	r24, 0x04	; 4
 546:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <gameState>
				
				//compare
		case 4:
			PORTD_OUTCLR = PIN6_bm;
 54a:	86 e6       	ldi	r24, 0x66	; 102
 54c:	96 e0       	ldi	r25, 0x06	; 6
 54e:	20 e4       	ldi	r18, 0x40	; 64
 550:	fc 01       	movw	r30, r24
 552:	20 83       	st	Z, r18
			PORTC.OUT = enemyData;
 554:	80 e4       	ldi	r24, 0x40	; 64
 556:	96 e0       	ldi	r25, 0x06	; 6
 558:	20 91 0b 20 	lds	r18, 0x200B	; 0x80200b <enemyData>
 55c:	fc 01       	movw	r30, r24
 55e:	24 83       	std	Z+4, r18	; 0x04
			
			for(int i = 0; i < 8; i++)
 560:	19 82       	std	Y+1, r1	; 0x01
 562:	1a 82       	std	Y+2, r1	; 0x02
 564:	3f c0       	rjmp	.+126    	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
			{
				
				//score if different
				if(attacker)
 566:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 56a:	88 23       	and	r24, r24
 56c:	c9 f0       	breq	.+50     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
				{
					if( (enemyData & (1 << i )) != (ledData & (1 << i )) )
 56e:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <enemyData>
 572:	28 2f       	mov	r18, r24
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <ledData>
 57a:	88 2f       	mov	r24, r24
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	82 27       	eor	r24, r18
 580:	93 27       	eor	r25, r19
 582:	09 80       	ldd	r0, Y+1	; 0x01
 584:	02 c0       	rjmp	.+4      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 586:	95 95       	asr	r25
 588:	87 95       	ror	r24
 58a:	0a 94       	dec	r0
 58c:	e2 f7       	brpl	.-8      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 58e:	81 70       	andi	r24, 0x01	; 1
 590:	99 27       	eor	r25, r25
 592:	89 2b       	or	r24, r25
 594:	29 f0       	breq	.+10     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
						score++;
 596:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <score>
 59a:	8f 5f       	subi	r24, 0xFF	; 255
 59c:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <score>
					
				}
				//score if same
				if(!attacker)
 5a0:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 5a4:	88 23       	and	r24, r24
 5a6:	c9 f4       	brne	.+50     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
				{
					if( (enemyData & (1 << i )) == (ledData & (1 << i )) )
 5a8:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <enemyData>
 5ac:	28 2f       	mov	r18, r24
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <ledData>
 5b4:	88 2f       	mov	r24, r24
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	82 27       	eor	r24, r18
 5ba:	93 27       	eor	r25, r19
 5bc:	09 80       	ldd	r0, Y+1	; 0x01
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5c0:	95 95       	asr	r25
 5c2:	87 95       	ror	r24
 5c4:	0a 94       	dec	r0
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5c8:	81 70       	andi	r24, 0x01	; 1
 5ca:	99 27       	eor	r25, r25
 5cc:	89 2b       	or	r24, r25
 5ce:	29 f4       	brne	.+10     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
					score++;
 5d0:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <score>
 5d4:	8f 5f       	subi	r24, 0xFF	; 255
 5d6:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <score>
				//compare
		case 4:
			PORTD_OUTCLR = PIN6_bm;
			PORTC.OUT = enemyData;
			
			for(int i = 0; i < 8; i++)
 5da:	89 81       	ldd	r24, Y+1	; 0x01
 5dc:	9a 81       	ldd	r25, Y+2	; 0x02
 5de:	01 96       	adiw	r24, 0x01	; 1
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	9a 83       	std	Y+2, r25	; 0x02
 5e4:	89 81       	ldd	r24, Y+1	; 0x01
 5e6:	9a 81       	ldd	r25, Y+2	; 0x02
 5e8:	08 97       	sbiw	r24, 0x08	; 8
 5ea:	0c f4       	brge	.+2      	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 5ec:	bc cf       	rjmp	.-136    	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
				{
					if( (enemyData & (1 << i )) == (ledData & (1 << i )) )
					score++;
				}
			}
			TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	98 e0       	ldi	r25, 0x08	; 8
 5f2:	27 e0       	ldi	r18, 0x07	; 7
 5f4:	fc 01       	movw	r30, r24
 5f6:	20 83       	st	Z, r18
			while(!(TCC0_INTFLAGS & 1)); //waits for ovf flag to be set
 5f8:	00 00       	nop
 5fa:	8c e0       	ldi	r24, 0x0C	; 12
 5fc:	98 e0       	ldi	r25, 0x08	; 8
 5fe:	fc 01       	movw	r30, r24
 600:	80 81       	ld	r24, Z
 602:	88 2f       	mov	r24, r24
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	81 70       	andi	r24, 0x01	; 1
 608:	99 27       	eor	r25, r25
 60a:	89 2b       	or	r24, r25
 60c:	b1 f3       	breq	.-20     	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
			TCC0_INTFLAGS = 1; //resets ovf flag
 60e:	8c e0       	ldi	r24, 0x0C	; 12
 610:	98 e0       	ldi	r25, 0x08	; 8
 612:	21 e0       	ldi	r18, 0x01	; 1
 614:	fc 01       	movw	r30, r24
 616:	20 83       	st	Z, r18
			TCC0.CTRLA = TC_CLKSEL_OFF_gc;
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	98 e0       	ldi	r25, 0x08	; 8
 61c:	fc 01       	movw	r30, r24
 61e:	10 82       	st	Z, r1
				
			
		gameState = 0;
 620:	10 92 08 20 	sts	0x2008, r1	; 0x802008 <gameState>
	
		break;
 624:	03 c0       	rjmp	.+6      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
				selfReady = 1;
				gameState = 1;
				s1Set = 0;
			}
			//USARTF0_out_char(0xFF);
		break;
 626:	00 00       	nop
 628:	b9 ce       	rjmp	.-654    	; 0x39c <main+0x3e>
			{
				//may want to add a timer delay to prevent issues
				gameState = 2;
			}
			
		break;
 62a:	00 00       	nop
		break;
		
		}
	
		
	}
 62c:	b7 ce       	rjmp	.-658    	; 0x39c <main+0x3e>

0000062e <__vector_44>:
}


//triggered when S1 is pressed
ISR(PORTE_INT1_vect)
{
 62e:	1f 92       	push	r1
 630:	0f 92       	push	r0
 632:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 636:	0f 92       	push	r0
 638:	11 24       	eor	r1, r1
 63a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 63e:	0f 92       	push	r0
 640:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 644:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 648:	0f 92       	push	r0
 64a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 64e:	8f 93       	push	r24
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	cd b7       	in	r28, 0x3d	; 61
 656:	de b7       	in	r29, 0x3e	; 62
	
	//s1 set
	s1Set = 1;
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <s1Set>
	
}
 65e:	00 00       	nop
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	8f 91       	pop	r24
 666:	0f 90       	pop	r0
 668:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 66c:	0f 90       	pop	r0
 66e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 672:	0f 90       	pop	r0
 674:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 678:	0f 90       	pop	r0
 67a:	1f 90       	pop	r1
 67c:	18 95       	reti

0000067e <__vector_43>:

ISR(PORTE_INT0_vect)
{
 67e:	1f 92       	push	r1
 680:	0f 92       	push	r0
 682:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 686:	0f 92       	push	r0
 688:	11 24       	eor	r1, r1
 68a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 68e:	0f 92       	push	r0
 690:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 694:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 698:	0f 92       	push	r0
 69a:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 69e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 6a2:	0f 92       	push	r0
 6a4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 6a8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 6ac:	0f 92       	push	r0
 6ae:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 6b2:	2f 93       	push	r18
 6b4:	3f 93       	push	r19
 6b6:	4f 93       	push	r20
 6b8:	5f 93       	push	r21
 6ba:	6f 93       	push	r22
 6bc:	7f 93       	push	r23
 6be:	8f 93       	push	r24
 6c0:	9f 93       	push	r25
 6c2:	af 93       	push	r26
 6c4:	bf 93       	push	r27
 6c6:	ef 93       	push	r30
 6c8:	ff 93       	push	r31
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	cd b7       	in	r28, 0x3d	; 61
 6d0:	de b7       	in	r29, 0x3e	; 62
	
	//s1 set
	if(gameState == 0 && !defSet)
 6d2:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <gameState>
 6d6:	88 23       	and	r24, r24
 6d8:	49 f4       	brne	.+18     	; 0x6ec <__vector_43+0x6e>
 6da:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <defSet>
 6de:	88 23       	and	r24, r24
 6e0:	29 f4       	brne	.+10     	; 0x6ec <__vector_43+0x6e>
	{
		attacker = 0;
 6e2:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
		defSet = 1;
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <defSet>
	}
	if(defSet)
 6ec:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <defSet>
 6f0:	88 23       	and	r24, r24
 6f2:	09 f4       	brne	.+2      	; 0x6f6 <__vector_43+0x78>
 6f4:	58 c0       	rjmp	.+176    	; 0x7a6 <__vector_43+0x128>
	{
		PORTC_OUT = 0xFF;
 6f6:	84 e4       	ldi	r24, 0x44	; 68
 6f8:	96 e0       	ldi	r25, 0x06	; 6
 6fa:	2f ef       	ldi	r18, 0xFF	; 255
 6fc:	fc 01       	movw	r30, r24
 6fe:	20 83       	st	Z, r18
		switch((score*8)/37)
 700:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <score>
 704:	88 2f       	mov	r24, r24
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	25 e2       	ldi	r18, 0x25	; 37
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	b9 01       	movw	r22, r18
 71a:	0e 94 ca 04 	call	0x994	; 0x994 <__divmodhi4>
 71e:	cb 01       	movw	r24, r22
 720:	09 2e       	mov	r0, r25
 722:	00 0c       	add	r0, r0
 724:	aa 0b       	sbc	r26, r26
 726:	bb 0b       	sbc	r27, r27
 728:	40 e0       	ldi	r20, 0x00	; 0
 72a:	50 e0       	ldi	r21, 0x00	; 0
 72c:	28 e0       	ldi	r18, 0x08	; 8
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	84 1b       	sub	r24, r20
 732:	95 0b       	sbc	r25, r21
 734:	28 17       	cp	r18, r24
 736:	39 07       	cpc	r19, r25
 738:	b0 f1       	brcs	.+108    	; 0x7a6 <__vector_43+0x128>
 73a:	fc 01       	movw	r30, r24
 73c:	88 27       	eor	r24, r24
 73e:	e2 50       	subi	r30, 0x02	; 2
 740:	ff 4f       	sbci	r31, 0xFF	; 255
 742:	8f 4f       	sbci	r24, 0xFF	; 255
 744:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__tablejump2__>
		{
			case 8:
			PORTC_OUTCLR = PIN0_bm;
 748:	86 e4       	ldi	r24, 0x46	; 70
 74a:	96 e0       	ldi	r25, 0x06	; 6
 74c:	21 e0       	ldi	r18, 0x01	; 1
 74e:	fc 01       	movw	r30, r24
 750:	20 83       	st	Z, r18
			case 7:
			PORTC_OUTCLR = PIN1_bm;
 752:	86 e4       	ldi	r24, 0x46	; 70
 754:	96 e0       	ldi	r25, 0x06	; 6
 756:	22 e0       	ldi	r18, 0x02	; 2
 758:	fc 01       	movw	r30, r24
 75a:	20 83       	st	Z, r18
			case 6:
			PORTC_OUTCLR = PIN2_bm;
 75c:	86 e4       	ldi	r24, 0x46	; 70
 75e:	96 e0       	ldi	r25, 0x06	; 6
 760:	24 e0       	ldi	r18, 0x04	; 4
 762:	fc 01       	movw	r30, r24
 764:	20 83       	st	Z, r18
			case 5:
			PORTC_OUTCLR = PIN3_bm;
 766:	86 e4       	ldi	r24, 0x46	; 70
 768:	96 e0       	ldi	r25, 0x06	; 6
 76a:	28 e0       	ldi	r18, 0x08	; 8
 76c:	fc 01       	movw	r30, r24
 76e:	20 83       	st	Z, r18
			case 4:
			PORTC_OUTCLR = PIN4_bm;
 770:	86 e4       	ldi	r24, 0x46	; 70
 772:	96 e0       	ldi	r25, 0x06	; 6
 774:	20 e1       	ldi	r18, 0x10	; 16
 776:	fc 01       	movw	r30, r24
 778:	20 83       	st	Z, r18
			case 3:
			PORTC_OUTCLR = PIN5_bm;
 77a:	86 e4       	ldi	r24, 0x46	; 70
 77c:	96 e0       	ldi	r25, 0x06	; 6
 77e:	20 e2       	ldi	r18, 0x20	; 32
 780:	fc 01       	movw	r30, r24
 782:	20 83       	st	Z, r18
			case 2:
			PORTC_OUTCLR = PIN6_bm;
 784:	86 e4       	ldi	r24, 0x46	; 70
 786:	96 e0       	ldi	r25, 0x06	; 6
 788:	20 e4       	ldi	r18, 0x40	; 64
 78a:	fc 01       	movw	r30, r24
 78c:	20 83       	st	Z, r18
			case 1:
			PORTC_OUTCLR = PIN7_bm;
 78e:	86 e4       	ldi	r24, 0x46	; 70
 790:	96 e0       	ldi	r25, 0x06	; 6
 792:	20 e8       	ldi	r18, 0x80	; 128
 794:	fc 01       	movw	r30, r24
 796:	20 83       	st	Z, r18
			break;
 798:	00 00       	nop
			case 0:
			PORTC_OUT = 0xFF;
		}
	}
	
}
 79a:	05 c0       	rjmp	.+10     	; 0x7a6 <__vector_43+0x128>
			PORTC_OUTCLR = PIN6_bm;
			case 1:
			PORTC_OUTCLR = PIN7_bm;
			break;
			case 0:
			PORTC_OUT = 0xFF;
 79c:	84 e4       	ldi	r24, 0x44	; 68
 79e:	96 e0       	ldi	r25, 0x06	; 6
 7a0:	2f ef       	ldi	r18, 0xFF	; 255
 7a2:	fc 01       	movw	r30, r24
 7a4:	20 83       	st	Z, r18
		}
	}
	
}
 7a6:	00 00       	nop
 7a8:	df 91       	pop	r29
 7aa:	cf 91       	pop	r28
 7ac:	ff 91       	pop	r31
 7ae:	ef 91       	pop	r30
 7b0:	bf 91       	pop	r27
 7b2:	af 91       	pop	r26
 7b4:	9f 91       	pop	r25
 7b6:	8f 91       	pop	r24
 7b8:	7f 91       	pop	r23
 7ba:	6f 91       	pop	r22
 7bc:	5f 91       	pop	r21
 7be:	4f 91       	pop	r20
 7c0:	3f 91       	pop	r19
 7c2:	2f 91       	pop	r18
 7c4:	0f 90       	pop	r0
 7c6:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 7ca:	0f 90       	pop	r0
 7cc:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 7d0:	0f 90       	pop	r0
 7d2:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 7d6:	0f 90       	pop	r0
 7d8:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 7dc:	0f 90       	pop	r0
 7de:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 7e2:	0f 90       	pop	r0
 7e4:	1f 90       	pop	r1
 7e6:	18 95       	reti

000007e8 <__vector_119>:

ISR(USARTF0_RXC_vect)
{
 7e8:	1f 92       	push	r1
 7ea:	0f 92       	push	r0
 7ec:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 7f0:	0f 92       	push	r0
 7f2:	11 24       	eor	r1, r1
 7f4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 7f8:	0f 92       	push	r0
 7fa:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 7fe:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 802:	0f 92       	push	r0
 804:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 808:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 80c:	0f 92       	push	r0
 80e:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 812:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 816:	0f 92       	push	r0
 818:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 81c:	2f 93       	push	r18
 81e:	3f 93       	push	r19
 820:	4f 93       	push	r20
 822:	5f 93       	push	r21
 824:	6f 93       	push	r22
 826:	7f 93       	push	r23
 828:	8f 93       	push	r24
 82a:	9f 93       	push	r25
 82c:	af 93       	push	r26
 82e:	bf 93       	push	r27
 830:	ef 93       	push	r30
 832:	ff 93       	push	r31
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	cd b7       	in	r28, 0x3d	; 61
 83a:	de b7       	in	r29, 0x3e	; 62
	
	receivedData = USARTF0_in_char();
 83c:	0e 94 b8 04 	call	0x970	; 0x970 <USARTF0_in_char>
 840:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <receivedData>
	if ((gameState == 0 || gameState == 1) & receivedData == 'r')
 844:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <gameState>
 848:	88 23       	and	r24, r24
 84a:	21 f0       	breq	.+8      	; 0x854 <__vector_119+0x6c>
 84c:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <gameState>
 850:	81 30       	cpi	r24, 0x01	; 1
 852:	19 f4       	brne	.+6      	; 0x85a <__vector_119+0x72>
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	02 c0       	rjmp	.+4      	; 0x85e <__vector_119+0x76>
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	81 70       	andi	r24, 0x01	; 1
 860:	20 91 0a 20 	lds	r18, 0x200A	; 0x80200a <receivedData>
 864:	91 e0       	ldi	r25, 0x01	; 1
 866:	22 37       	cpi	r18, 0x72	; 114
 868:	09 f0       	breq	.+2      	; 0x86c <__vector_119+0x84>
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	89 23       	and	r24, r25
 86e:	88 23       	and	r24, r24
 870:	19 f0       	breq	.+6      	; 0x878 <__vector_119+0x90>
	{
		otherReady = 1;
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <otherReady>
	}

 878:	00 00       	nop
 87a:	df 91       	pop	r29
 87c:	cf 91       	pop	r28
 87e:	ff 91       	pop	r31
 880:	ef 91       	pop	r30
 882:	bf 91       	pop	r27
 884:	af 91       	pop	r26
 886:	9f 91       	pop	r25
 888:	8f 91       	pop	r24
 88a:	7f 91       	pop	r23
 88c:	6f 91       	pop	r22
 88e:	5f 91       	pop	r21
 890:	4f 91       	pop	r20
 892:	3f 91       	pop	r19
 894:	2f 91       	pop	r18
 896:	0f 90       	pop	r0
 898:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 89c:	0f 90       	pop	r0
 89e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 8a2:	0f 90       	pop	r0
 8a4:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 8a8:	0f 90       	pop	r0
 8aa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 8ae:	0f 90       	pop	r0
 8b0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 8b4:	0f 90       	pop	r0
 8b6:	1f 90       	pop	r1
 8b8:	18 95       	reti

000008ba <timer_init>:

int period = 1*(2000000/1024);


void timer_init(uint8_t interrupts)
{
 8ba:	cf 93       	push	r28
 8bc:	df 93       	push	r29
 8be:	1f 92       	push	r1
 8c0:	cd b7       	in	r28, 0x3d	; 61
 8c2:	de b7       	in	r29, 0x3e	; 62
 8c4:	89 83       	std	Y+1, r24	; 0x01
	
	//sets period equal to
	timer.PER = period;
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	98 e0       	ldi	r25, 0x08	; 8
 8ca:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <period>
 8ce:	30 91 02 20 	lds	r19, 0x2002	; 0x802002 <period+0x1>
 8d2:	fc 01       	movw	r30, r24
 8d4:	26 a3       	std	Z+38, r18	; 0x26
 8d6:	37 a3       	std	Z+39, r19	; 0x27
	
	//resets count
	timer.CNT = 0;
 8d8:	80 e0       	ldi	r24, 0x00	; 0
 8da:	98 e0       	ldi	r25, 0x08	; 8
 8dc:	fc 01       	movw	r30, r24
 8de:	10 a2       	std	Z+32, r1	; 0x20
 8e0:	11 a2       	std	Z+33, r1	; 0x21
	
	//enables interrupts
	if(interrupts)
 8e2:	89 81       	ldd	r24, Y+1	; 0x01
 8e4:	88 23       	and	r24, r24
 8e6:	29 f0       	breq	.+10     	; 0x8f2 <timer_init+0x38>
		timer.INTCTRLA = timerIntLvl;	
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	98 e0       	ldi	r25, 0x08	; 8
 8ec:	21 e0       	ldi	r18, 0x01	; 1
 8ee:	fc 01       	movw	r30, r24
 8f0:	26 83       	std	Z+6, r18	; 0x06
	
	//starts timer at prescaler
	//timer.CTRLA = prescaler;
	
}
 8f2:	00 00       	nop
 8f4:	0f 90       	pop	r0
 8f6:	df 91       	pop	r29
 8f8:	cf 91       	pop	r28
 8fa:	08 95       	ret

000008fc <USARTF0_INIT>:
* Output: N/A
******************************************************************************/
void USARTF0_out_string(char * str)
{
	while(*str!= 0) USARTF0_out_char(*(str++));
}
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	cd b7       	in	r28, 0x3d	; 61
 902:	de b7       	in	r29, 0x3e	; 62
 904:	80 ea       	ldi	r24, 0xA0	; 160
 906:	9b e0       	ldi	r25, 0x0B	; 11
 908:	fc 01       	movw	r30, r24
 90a:	16 82       	std	Z+6, r1	; 0x06
 90c:	80 ea       	ldi	r24, 0xA0	; 160
 90e:	9b e0       	ldi	r25, 0x0B	; 11
 910:	fc 01       	movw	r30, r24
 912:	17 82       	std	Z+7, r1	; 0x07
 914:	80 ea       	ldi	r24, 0xA0	; 160
 916:	9b e0       	ldi	r25, 0x0B	; 11
 918:	23 e0       	ldi	r18, 0x03	; 3
 91a:	fc 01       	movw	r30, r24
 91c:	25 83       	std	Z+5, r18	; 0x05
 91e:	80 ea       	ldi	r24, 0xA0	; 160
 920:	9b e0       	ldi	r25, 0x0B	; 11
 922:	28 e1       	ldi	r18, 0x18	; 24
 924:	fc 01       	movw	r30, r24
 926:	24 83       	std	Z+4, r18	; 0x04
 928:	80 ea       	ldi	r24, 0xA0	; 160
 92a:	9b e0       	ldi	r25, 0x0B	; 11
 92c:	20 e2       	ldi	r18, 0x20	; 32
 92e:	fc 01       	movw	r30, r24
 930:	23 83       	std	Z+3, r18	; 0x03
 932:	00 00       	nop
 934:	df 91       	pop	r29
 936:	cf 91       	pop	r28
 938:	08 95       	ret

0000093a <USARTF0_out_char>:
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	1f 92       	push	r1
 940:	cd b7       	in	r28, 0x3d	; 61
 942:	de b7       	in	r29, 0x3e	; 62
 944:	89 83       	std	Y+1, r24	; 0x01
 946:	00 00       	nop
 948:	80 ea       	ldi	r24, 0xA0	; 160
 94a:	9b e0       	ldi	r25, 0x0B	; 11
 94c:	fc 01       	movw	r30, r24
 94e:	81 81       	ldd	r24, Z+1	; 0x01
 950:	88 2f       	mov	r24, r24
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	80 72       	andi	r24, 0x20	; 32
 956:	99 27       	eor	r25, r25
 958:	89 2b       	or	r24, r25
 95a:	b1 f3       	breq	.-20     	; 0x948 <USARTF0_out_char+0xe>
 95c:	80 ea       	ldi	r24, 0xA0	; 160
 95e:	9b e0       	ldi	r25, 0x0B	; 11
 960:	29 81       	ldd	r18, Y+1	; 0x01
 962:	fc 01       	movw	r30, r24
 964:	20 83       	st	Z, r18
 966:	00 00       	nop
 968:	0f 90       	pop	r0
 96a:	df 91       	pop	r29
 96c:	cf 91       	pop	r28
 96e:	08 95       	ret

00000970 <USARTF0_in_char>:
* Purpose: To read in a character from the receiver within USARTF0.
* Input(s): N/A
* Output: (char)
******************************************************************************/
char USARTF0_in_char(void)
{
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	cd b7       	in	r28, 0x3d	; 61
 976:	de b7       	in	r29, 0x3e	; 62
 while(!(USARTF0.STATUS & USART_RXCIF_bm));
 978:	00 00       	nop
 97a:	80 ea       	ldi	r24, 0xA0	; 160
 97c:	9b e0       	ldi	r25, 0x0B	; 11
 97e:	fc 01       	movw	r30, r24
 980:	81 81       	ldd	r24, Z+1	; 0x01
 982:	88 23       	and	r24, r24
 984:	d4 f7       	brge	.-12     	; 0x97a <USARTF0_in_char+0xa>
 return USARTF0.DATA;
 986:	80 ea       	ldi	r24, 0xA0	; 160
 988:	9b e0       	ldi	r25, 0x0B	; 11
 98a:	fc 01       	movw	r30, r24
 98c:	80 81       	ld	r24, Z
}
 98e:	df 91       	pop	r29
 990:	cf 91       	pop	r28
 992:	08 95       	ret

00000994 <__divmodhi4>:
 994:	97 fb       	bst	r25, 7
 996:	07 2e       	mov	r0, r23
 998:	16 f4       	brtc	.+4      	; 0x99e <__divmodhi4+0xa>
 99a:	00 94       	com	r0
 99c:	07 d0       	rcall	.+14     	; 0x9ac <__divmodhi4_neg1>
 99e:	77 fd       	sbrc	r23, 7
 9a0:	09 d0       	rcall	.+18     	; 0x9b4 <__divmodhi4_neg2>
 9a2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__udivmodhi4>
 9a6:	07 fc       	sbrc	r0, 7
 9a8:	05 d0       	rcall	.+10     	; 0x9b4 <__divmodhi4_neg2>
 9aa:	3e f4       	brtc	.+14     	; 0x9ba <__divmodhi4_exit>

000009ac <__divmodhi4_neg1>:
 9ac:	90 95       	com	r25
 9ae:	81 95       	neg	r24
 9b0:	9f 4f       	sbci	r25, 0xFF	; 255
 9b2:	08 95       	ret

000009b4 <__divmodhi4_neg2>:
 9b4:	70 95       	com	r23
 9b6:	61 95       	neg	r22
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255

000009ba <__divmodhi4_exit>:
 9ba:	08 95       	ret

000009bc <__tablejump2__>:
 9bc:	ee 0f       	add	r30, r30
 9be:	ff 1f       	adc	r31, r31
 9c0:	88 1f       	adc	r24, r24
 9c2:	8b bf       	out	0x3b, r24	; 59
 9c4:	07 90       	elpm	r0, Z+
 9c6:	f6 91       	elpm	r31, Z
 9c8:	e0 2d       	mov	r30, r0
 9ca:	1b be       	out	0x3b, r1	; 59
 9cc:	19 94       	eijmp

000009ce <__udivmodhi4>:
 9ce:	aa 1b       	sub	r26, r26
 9d0:	bb 1b       	sub	r27, r27
 9d2:	51 e1       	ldi	r21, 0x11	; 17
 9d4:	07 c0       	rjmp	.+14     	; 0x9e4 <__udivmodhi4_ep>

000009d6 <__udivmodhi4_loop>:
 9d6:	aa 1f       	adc	r26, r26
 9d8:	bb 1f       	adc	r27, r27
 9da:	a6 17       	cp	r26, r22
 9dc:	b7 07       	cpc	r27, r23
 9de:	10 f0       	brcs	.+4      	; 0x9e4 <__udivmodhi4_ep>
 9e0:	a6 1b       	sub	r26, r22
 9e2:	b7 0b       	sbc	r27, r23

000009e4 <__udivmodhi4_ep>:
 9e4:	88 1f       	adc	r24, r24
 9e6:	99 1f       	adc	r25, r25
 9e8:	5a 95       	dec	r21
 9ea:	a9 f7       	brne	.-22     	; 0x9d6 <__udivmodhi4_loop>
 9ec:	80 95       	com	r24
 9ee:	90 95       	com	r25
 9f0:	bc 01       	movw	r22, r24
 9f2:	cd 01       	movw	r24, r26
 9f4:	08 95       	ret

000009f6 <_exit>:
 9f6:	f8 94       	cli

000009f8 <__stop_program>:
 9f8:	ff cf       	rjmp	.-2      	; 0x9f8 <__stop_program>
